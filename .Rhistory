dataList[[i]] <- read.csv(fileNames[i], col.names = c("Date", "NA", "Open", "High", "Low", "Close", "Volume"))
dataList[[i]]$Stock <- stockNames[i]
}
data <- do.call(rbind, dataList)
df <- data[, c(1, 6, 8)]
df$Date <- lubridate::parse_date_time(df$Date, orders = "ymd")
data <- arrange(data, Stock, Date)
d1W <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "-1W", slideBy = -7, type = "percent")
d1W <- DataCombine::change(data = d1W, Var = "Close", GroupVar = "Stock",
NewVar = "+1W", slideBy = +7, type = "percent")
View(d1W)
d1W <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "-1W", slideBy = -7, type = "percent")
d1W <- DataCombine::change(data = d1W, Var = "Close", GroupVar = "Stock",
NewVar = "+1W", slideBy = 7, type = "percent")
View(d1W)
d1W <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "-1W", slideBy = -7, type = "percent")
d1W <- DataCombine::change(data = d1W, Var = "Close", GroupVar = "Stock",
NewVar = "1W", slideBy = 7, type = "percent")
d1W$1W <- -d1W$1W
View(d1W)
d1W$1W <- -d1W$1W
d1W$`1W` <- -d1W$`1W`
View(d1W)
str(change)
change
slide
fit <- lm(d1W, `-1W` ~ `1W`)
fit <- lm(d1W, -1W ~ 1W)
d1W <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "P1W", slideBy = -7, type = "percent")
d1W <- DataCombine::change(data = d1W, Var = "Close", GroupVar = "Stock",
NewVar = "F1W", slideBy = 7, type = "percent")
d1W$F1W <- -d1W$F1W ## Forward-looking % change expressed as % of future value, not past - resolve
fit <- lm(d1W, F1W ~ P1W)
fit <- lm(data = d1W, F1W ~ P1W)
fit
summary(fit)
data <- arrange(data, Stock, Date)
d1M <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "P1M", slideBy = -30, type = "percent")
d1M <- DataCombine::change(data = d1W, Var = "Close", GroupVar = "Stock",
NewVar = "F1W", slideBy = 7, type = "percent")
d1M$F1W <- -d1M$F1W ## Forward-looking % change expressed as % of future value, not past - resolve
## Regression model
fit <- lm(data = d1M, F1W ~ P1M)
View(d1M)
d1M <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "P1M", slideBy = -30, type = "percent")
d1M <- DataCombine::change(data = d1W, Var = "Close", GroupVar = "Stock",
NewVar = "F1W", slideBy = 7, type = "percent")
View(d1M)
d1M <- DataCombine::change(data = df, Var = "Close", GroupVar = "Stock",
NewVar = "P1M", slideBy = -30, type = "percent")
d1M <- DataCombine::change(data = d1M, Var = "Close", GroupVar = "Stock",
NewVar = "F1W", slideBy = 7, type = "percent")
d1M$F1W <- -d1M$F1W ## Forward-looking % change expressed as % of future value, not past - resolve
## Regression model
fit <- lm(data = d1M, F1W ~ P1M)
summary(fit)
library(caret)
install.packages("caret")
install.packages("kernlab")
library(caret)
library(kernlab)
R.version()
R.Version()
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
View(spam)
View(spam$type)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32343)
modelFit <- traing(type ~., data = training, method = "glm')
f
)
asldjkf
)))
d
exit
train()
)))))))
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain, ]
test <- spam[-inTrain, ]
dim(training)
set.seed(32343)
modelFit <- train(type ~., data = training, method = "glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modelFit <- train(type ~., data = training, method = "glm")
library(caret)
library(kernlab)
data(spam)
modelFit <- train(type ~., data = training, method = "glm")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain, ]
test <- spam[-inTrain, ]
modelFit <- train(type ~., data = training, method = "glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata = testing)
testing <- spam[-inTrain, ]
predictions <- predict(modelFit, newdata = testing)
predictions
confusionMatrix(predictions, testing$type)
library(ISLR)
install.packages("ISLR")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
library(caret)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
confusionMatrix(pred_rf, vowel.test$y)
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
View(predDF)
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
set.seed(12345)
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train <- read.csv(url(trainurl), na.strings = c("NA", "#DIV/0!", ""), header = TRUE)
test <- read.csv(url(testurl), na.strings = c("NA", "#DIV/0!", ""), header = TRUE)
inTrain <- createDataPartition(y = train$classe, p = 0.75, list = FALSE)
subTrain <- train[inTrain, ]
subTest <- train[-inTrain, ]
library(lattice, ggplot2, caret, randomForest, rpart, rpart.plot, corrplot)
install.packages("randomForest")
library(lattice, ggplot2, caret, randomForest, rpart, rpart.plot, corrplot)
library(lattice, ggplot2, caret, rpart, rpart.plot, corrplot)
library(lattice)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(corrplot)
inTrain <- createDataPartition(y = train$classe, p = 0.75, list = FALSE)
subTrain <- train[inTrain, ]
subTest <- train[-inTrain, ]
subTrain <-subTrain[,colSums(is.na(train)) == 0]
subTrain <-subTrain[, -c(1:7)]
dim(subTrain)
nzv <- nearZeroVar(subTrain, saveMetrics=TRUE)
nrow(nzv[nzv$nzv == TRUE, ])
M <- abs(cor(subTrain[, - 53]))
high_corr <- findCorrelation(M, cutoff = 0.8)
subTrain <- subTrain[, -high_corr]
dim(subTrain)
library(lattice)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(corrplot)
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train <- read.csv(url(trainurl), na.strings = c("NA", "#DIV/0!", ""), header = TRUE)
test <- read.csv(url(testurl), na.strings = c("NA", "#DIV/0!", ""), header = TRUE)
inTrain <- createDataPartition(y = train$classe, p = 0.75, list = FALSE)
subTrain <- train[inTrain, ]
subTest <- train[-inTrain, ]
subTrain <-subTrain[,colSums(is.na(train)) == 0]
subTrain <-subTrain[, -c(1:7)]
nzv <- nearZeroVar(subTrain, saveMetrics=TRUE)
nrow(nzv[nzv$nzv == TRUE, ])
M <- abs(cor(subTrain[, - 53]))
high_corr <- findCorrelation(M, cutoff = 0.8)
subTrain <- subTrain[, -high_corr]
dim(subTrain)
control <- trainControl(method = "cv", number = 5)
mod_gbm <- train(classe ~ ., data = subTrain, method = "gbm", trControl = control)
mod_rpart <- train(classe ~., data = subTrain, method = "rpart", trControl = control)
pred_rpart <- predict(mod_rpart, subTest)
confusionMatrix(pred_rpart, subTest$classe)$overall[1]
fancyRpartPlot(fit_rpart$finalModel)
library(rpart.plot)
fancyRpartPlot(fit_rpart$finalModel)
library(rattle)
fancyRpartPlot(fit_rpart$finalModel)
fancyRpartPlot(mod_rpart$finalModel)
mod_rf <- train(classe ~., data = subTrain, method = "rf", trControl = control)
pred_rf <- predict(mod_rf, subTest)
confusionMatrix(pred_rf, subTest$classe)$overall[1]
mod_rf
predict(mod_rf, test)
View(test)
round((confusionMatrix(pred_rpart, subTest$classe)$overall[1]/100), digits = 2)
confusionMatrix(pred_rpart, subTest$classe)$overall[1]
round((confusionMatrix(pred_rf, subTest$classe)$overall[1]/100), digits = 2)
confusionMatrix(pred_rpart, subTest$classe)$overall[1]
class(confusionMatrix(pred_rf, subTest$classe)$overall[1])
confusionMatrix(pred_rf, subTest$classe)$overall[1]*100
round(confusionMatrix(pred_rf, subTest$classe)$overall[1]*100, digits = 2)
round(confusionMatrix(pred_rf, subTest$classe)$overall[1]*100, digits = 2)
round(confusionMatrix(pred_rpart, subTest$classe)$overall[1]*100, digits = 2)
1-round(confusionMatrix(pred_rf, subTest$classe)$overall[1]*100, digits = 2)
100-round(confusionMatrix(pred_rf, subTest$classe)$overall[1]*100, digits = 2)
install.packages("shiny")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World!")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", label = "Choose a Number", value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016"), multiple = TRUE)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016"))
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Google")
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016"))
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Google"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016"))
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("US10", "US20", "CA00", "US70"))
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("US10", "US20", "CA00", "US70")),
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
"or",
dateRangeInput(inputId = "date", label = "Date Range", start = NULL, end = NULL, min = 2014-01-01,
max = NULL, format = "yyyy-mm-dd"),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
"or",
dateRangeInput(inputId = "date", label = "Date Range", start = 2014-01-01, end = NULL, min = 2014-01-01,
max = NULL, format = "yyyy-mm-dd"),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 100, value = 25),
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit"),
plotOutput(hist)
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- paste("Histogram of", input$num, "normal values")
hist(rnorm(input$num)) })
}
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 100, value = 25, label = "Choose a number"),
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit"),
plotOutput(hist)
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- paste("Histogram of", input$num, "normal values")
hist(rnorm(input$num)) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 100, value = 25, label = "Choose a number"),
plotOutput(hist)
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- paste("Histogram of", input$num, "normal values")
hist(rnorm(input$num)) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 100, value = 25, label = "Choose a number"),
textInput(inputId = "vendor", label = "Vendor", placeholder = "Start typing vendor name"),
selectInput(inputId = "year", label = "Fiscal Year", choices = c("2014", "2015", "2016")),
selectInput(inputId = "ccode", label = "Company Code", choices = c("CA00", "US10", "US20", "US70"), multiple = TRUE),
submitButton(text = "Submit"),
plotOutput(hist)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num)) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 100, value = 25, label = "Choose a number"),
plotOutput(hist)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num)) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 100, value = 25, label = "Choose a number"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num)) })
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", min = 0, max = 1000, value = 25, label = "Choose a number"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num)) })
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gikolev', token='80A03F6533703295C54BACEF6DF10EA6', secret='L0SVVaZUOKCfBpMz7BSkiH0HNN2dLbyZTsBcuFyE')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages(rcharts)
install.packages("rcharts")
library(elecequip)
data(elecequip)
plot(stl(nottem, "per"))
?nottem
shiny::runApp('coursera/Data_Products')
shiny::runApp('coursera/Data_Products')
publish_github(gikolev, data_products_project)
library(slidify)
publish_github(gikolev, data_products_project)
slidify("index.Rmd")
setwd("/Users/gik/Data_Analytics/R_Directory/coursera/Data_Products/deck")
slidify("index.Rmd")
publish_github(gikolev, data_products_project)
publish_github(data_products_project, gikolev)
publish_rpubs(title = "Altman Z-score Calculator", html_file = "index.html")
publish(user = "gikolev", repo = "data_products_project")
author("deck")
setwd("/Users/gik/Data_Analytics/R_Directory/coursera/Data_Products")
author("deck")
